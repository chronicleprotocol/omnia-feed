#!/usr/bin/env bash
set -eo pipefail

[[ -z "$ORACLE_DEBUG" ]] || set -x

SCRIPT_DIR="$(cd "${BASH_SOURCE[0]%/*}" && pwd)"
TARGET_DIR="${TARGET_DIR:-/etc/systemd/system}"
SHARE_DIR="${SHARE_PATH:-$SCRIPT_DIR}"
OMNIA_LIB_PATH="${OMNIA_LIB_PATH:-$SCRIPT_DIR/../omnia/lib}"
OMNIA_CONF_PATH="$SCRIPT_DIR/../share"

export SSB_PATH="${SSB_PATH:-$(command -v ssb-server)}"
export SSB_CONF="${SSB_CONF:-$(dirname "$(command -v ssb-server)")/.ssb/config}"

export GOFER_PATH="${GOFER_PATH:-$(command -v gofer)}"
export GOFER_CONFIG="${GOFER_CONFIG:-/etc/gofer.conf}"
export GOFER_LOG_FORMAT="${GOFER_LOG_FORMAT:-"text"}"
export GOFER_LOG_VERBOSITY="${GOFER_LOG_VERBOSITY:-"error"}"

export SPIRE_PATH="${SPIRE_PATH:-$(command -v spire)}"
export SPIRE_CONFIG="${SPIRE_CONFIG:-/etc/spire.conf}"
export SPIRE_LOG_FORMAT="${SPIRE_LOG_FORMAT:-"text"}"
export SPIRE_LOG_VERBOSITY="${SPIRE_LOG_VERBOSITY:-"error"}"

export OMNIA_PATH="${OMNIA_PATH:-$(command -v omnia)}"
export OMNIA_CONFIG="${OMNIA_CONFIG:-/etc/omnia.conf}"

export SPLITTER_PATH="${SPLITTER_PATH:-$(command -v rpc-splitter)}"
export SPLITTER_CONFIG="${SPLITTER_CONFIG:-/etc/splitter.conf}"
export SPLITTER_URLS="${SPLITTER_URLS:-""}"
export SPLITTER_LOG_FORMAT="${SPLITTER_LOG_FORMAT:-"text"}"
export SPLITTER_LOG_VERBOSITY="${SPLITTER_LOG_VERBOSITY:-"error"}"
export SPLITTER_RPC_ADDR="${SPLITTER_RPC_ADDR:-"127.0.0.1:9989"}"

export LEELOO_PATH=${LEELOO_PATH:-$(command -v leeloo)}
export LEELOO_CONFIG=${LEELOO_CONFIG:-/etc/leeloo.conf}
export LEELOO_LOG_FORMAT=${LEELOO_LOG_FORMAT:-"text"}
export LEELOO_LOG_VERBOSITY=${LEELOO_LOG_VERBOSITY:-"error"}

usage() {
	cat >&2 << EOF
Usage: install-omnia COMMAND OPTIONS...

Commands:
  relay Install Omnia service with default relay config
  feed  Install Omnia service with default feed config
  --help  Print this message

Options:
  --from ADDRESS   Set Ethereum address to use for signing
  --keystore PATH  Set Ethereum keystore path
  --password PATH  Set Ethereum keystore password file path

  --ssb-caps CAPS_FILE           Set Scuttlebot caps from file
  --ssb-external EXTERNAL_ADDRS  Set Scuttlebot external IP/host address
  --ssb-secret SECRET_FILE       Install Scuttlebot secret
  --ssb-gossip GOSSIP_JSON_FILE  Install Scuttlbot gossip.json file

  --eth-rpc URL                                  add an ethereum node rpc url to the list (can be used multiple times)
  --eth-rpc-arbitrum URL                         add an arbitrum node rpc url to the list (can be used multiple times)
  --eth-rpc-optimism URL                         add an optimism node rpc url to the list (can be used multiple times)
  --eth-type [ ethereum | optimism | arbitrum ]  set blockchain type
  --eth-gas GAS_LIMIT                            set gas limit for transactions

  --set-origin-param NAME KEY VALUE  set the KEY parameter to VALUE for an origin named NAME

  --log-format [ text | json ]                        format logs as text or json
  --log-verbosity [ error | warning | info | debug ]  set log verbosity

  --verbose  enable verbose output (for Omnia only)
  --debug    run in debug mode (for Omnia only)
EOF
	exit 1
}

subst() {
	local name
	name="$1.service"
	local target
	target="$TARGET_DIR"/"$name"
	local restart
	restart=$(if [[ -e "$target" ]]; then echo 1; fi)

	# shellcheck disable=SC2016
	envsubst '
$USER
$SSB_PATH $SSB_CONF $SSB_CAPS $SSB_KEYS $SSB_PORT $SSB_HOST
$OMNIA_PATH $OMNIA_CONFIG
$GOFER_PATH $GOFER_CONFIG
$GOFER_LOG_VERBOSITY $GOFER_LOG_FORMAT
$SPIRE_PATH $SPIRE_CONFIG
$SPIRE_LOG_VERBOSITY $SPIRE_LOG_FORMAT
$LEELOO_PATH $LEELOO_CONFIG
$LEELOO_LOG_VERBOSITY $LEELOO_LOG_FORMAT
$SPLITTER_PATH $SPLITTER_URLS
$SPLITTER_LOG_VERBOSITY $SPLITTER_LOG_FORMAT
' < "$2" | sudo tee "$target" >&2

	echo >&2 "$name -> $target"

	systemdCmd+="systemctl enable $name # Enable auto-start of $1 service at boot
"
	if [[ -n "$restart" ]]; then
		systemdCmd+="systemctl restart $name # Restart $1 service now
"
	else
		systemdCmd+="systemctl start $name # Start $1 service now
"
	fi
}

declare -a configUpdates
declare -a configOverrides
copyOmniaConf() {
	echo >&2 "OMNIA_CONFIG: START"

	if [[ -f "$OMNIA_CONFIG" ]]; then
		local _savedConfig
		_savedConfig="$(jq -c '{ethereum} | del(.. | nulls)' "$OMNIA_CONFIG")"
		if [[ -n "$_savedConfig" ]]; then
			configUpdates+=(". * $_savedConfig")
		fi
	fi

	sudo cp -v "$OMNIA_CONF_PATH/$1" "$OMNIA_CONFIG" >&2
	sudo chmod u+w "$OMNIA_CONFIG" >&2

	configUpdates+=('.options.logFormat = "text"')
	configOverrides+=(".options.setzerEthRpcUrl = \"http://${SPLITTER_RPC_ADDR}\"")

	for i in "${!configUpdates[@]}"; do
		echo >&2 "${configUpdates[$i]}"
		sudo tee "$OMNIA_CONFIG" <<< "$(jq "${configUpdates[$i]}" "$OMNIA_CONFIG")" > /dev/null
	done
	for i in "${!configOverrides[@]}"; do
		echo >&2 "${configOverrides[$i]}"
		sudo tee "$OMNIA_CONFIG" <<< "$(jq "${configOverrides[$i]}" "$OMNIA_CONFIG")" > /dev/null
	done

	echo >&2 "OMNIA_CONFIG: DONE"
}

declare -a ssbConfigUpdates
copySsbConf() {
	echo >&2 "SSB_CONF: START"
	ssbConfigUpdates+=(".friends.hops = (.friends.hops // 6)")

	local confDir="$HOME/.ssb"
	export SSB_KEYS="$confDir/secret"
	export SSB_GOSSIP="$confDir/gossip.json"
	export SSB_CONF="$confDir/config"

	local updatedConf

	mkdir -p "$confDir"

	if [[ -f $SSB_CONF ]]; then
		updatedConf=$(jq . "$SSB_CONF")
	fi
	[[ -n $updatedConf ]] || updatedConf=$(jq . "$SHARE_DIR/ssb-config.json")

	for i in "${!ssbConfigUpdates[@]}"; do
		updatedConf=$(jq -c "${ssbConfigUpdates[$i]}" <<< "$updatedConf")
	done

	tee "$SSB_CONF" <<< "$updatedConf" > /dev/null 2>&1

	export SSB_HOST
	SSB_HOST="$(jq -cr '.connections.incoming["net"][].host | select(.!= null) // "localhost"' <<< "$updatedConf")"
	export SSB_PORT
	SSB_PORT="$(jq -cr '.connections.incoming["net"][].port | select(.!= null) // 8007' <<< "$updatedConf")"

	if [[ -n "$installSsbSecret" ]]; then
		cp -iv "$installSsbSecret" "$SSB_KEYS"
		chmod 0600 "$SSB_KEYS"
	fi

	if [[ -n "$installSsbGossip" ]]; then
		cp -iv "$installSsbGossip" "$SSB_GOSSIP"
		chmod 0600 "$SSB_GOSSIP"
	fi

	echo >&2 "SSB_CONF: DONE"
}

declare -a spireConfigUpdates
declare -a spireConfigOverrides
copySpireConf() {
	echo >&2 "SPIRE_CONFIG: START"

	if [[ -f "${SPIRE_CONFIG%.conf}.json" ]]; then
		sudo mv -f "${SPIRE_CONFIG%.conf}.json" "$SPIRE_CONFIG"
	fi

	if [[ -f "$SPIRE_CONFIG" ]]; then
		local _savedConfig
		_savedConfig="$(jq '{ethereum} | del(.. | nulls)' "$SPIRE_CONFIG")"
		if [[ -n "$_savedConfig" ]]; then
			spireConfigOverrides+=(". * $_savedConfig")
		fi
	fi

	sudo cp -v "$SHARE_DIR/spire.json" "$SPIRE_CONFIG" >&2
	sudo chmod u+w "$SPIRE_CONFIG" >&2

	for i in "${!spireConfigUpdates[@]}"; do
		echo >&2 "  ${spireConfigUpdates[$i]}"
		sudo tee "$SPIRE_CONFIG" <<<"$(jq -c "${spireConfigUpdates[$i]}" "$SPIRE_CONFIG")" > /dev/null
	done
	for i in "${!spireConfigOverrides[@]}"; do
		echo >&2 "  ${spireConfigOverrides[$i]}"
		sudo tee "$SPIRE_CONFIG" <<<"$(jq -c "${spireConfigOverrides[$i]}" "$SPIRE_CONFIG")" > /dev/null
	done

	echo >&2 "SPIRE_CONFIG: DONE"
}

declare -a leelooConfigUpdates
declare -a leelooConfigOverrides
copyLeelooConf() {
	echo >&2 "LEELOO_CONFIG: START"

	if [[ -f "${LEELOO_CONFIG%.conf}.json" ]]
	then
		sudo mv -f "${LEELOO_CONFIG%.conf}.json" "$LEELOO_CONFIG"
	fi

	if [[ -f "${LEELOO_CONFIG}" ]]
	then
		local _savedConfig
		_savedConfig="$(jq -c '{ethereum,leeloo:{listeners:{teleportEVM:[{ethereum:{rpc:.leeloo.listeners.teleportEVM[0].ethereum.rpc}},{ethereum:{rpc:.leeloo.listeners.teleportEVM[1].ethereum.rpc}}]}}} | del(.. | nulls)' "${LEELOO_CONFIG}")"

		local _optRPCs
		_optRPCs="$(jq -c '.leeloo.listeners.teleportEVM[0].ethereum.rpc // []' <<<"${_savedConfig}")"
		leelooConfigUpdates+=(".leeloo.listeners.teleportEVM[0].ethereum.rpc = ${_optRPCs}")

		local _arbRPCs
		_arbRPCs="$(jq -c '.leeloo.listeners.teleportEVM[1].ethereum.rpc // []' <<<"${_savedConfig}")"
		leelooConfigUpdates+=(".leeloo.listeners.teleportEVM[1].ethereum.rpc = ${_arbRPCs}")

		local _eth
		_eth="$(jq -c '.ethereum' <<<"${_savedConfig}")"
		leelooConfigUpdates+=(".ethereum = ${_eth}")
	fi

	sudo cp -v "$SHARE_DIR/leeloo.json" "$LEELOO_CONFIG" >&2
	sudo chmod u+w "$LEELOO_CONFIG" >&2

	for i in "${!leelooConfigUpdates[@]}"; do
		echo >&2 "  ${leelooConfigUpdates[$i]}"
		sudo tee "$LEELOO_CONFIG" <<< "$(jq -c "${leelooConfigUpdates[$i]}" "$LEELOO_CONFIG")" > /dev/null
	done
	for i in "${!leelooConfigOverrides[@]}"; do
		echo >&2 "  ${leelooConfigOverrides[$i]}"
		sudo tee "$LEELOO_CONFIG" <<< "$(jq -c "${leelooConfigOverrides[$i]}" "$LEELOO_CONFIG")" > /dev/null
	done

	echo >&2 "LEELOO_CONFIG: DONE"
}

declare -a goferConfigUpdates
declare -a goferConfigOverrides
copyGoferConf() {
	echo >&2 "GOFER_CONFIG: START"

	if [[ -f "${GOFER_CONFIG%.conf}.json" ]]
	then
		sudo mv -f "${GOFER_CONFIG%.conf}.json" "$GOFER_CONFIG"
	fi

	if [[ -f "$GOFER_CONFIG" ]]; then
		local _savedConfig
		_savedConfig="$(jq '{ethereum,gofer:{origins:{openexchangerates:{params:{apiKey:.gofer.origins.openexchangerates.params.apiKey}}}}} | del(.. | nulls)' "$GOFER_CONFIG")"
		if [[ -n "$_savedConfig" ]]; then
			goferConfigUpdates=( ". * $_savedConfig" )
		fi
	fi

	sudo cp -v "$SHARE_DIR/gofer.json" "$GOFER_CONFIG" >&2
	sudo chmod u+w "$GOFER_CONFIG" >&2

	goferConfigOverrides+=(".ethereum.rpc = \"http://${SPLITTER_RPC_ADDR}\"")

	for i in "${!goferConfigUpdates[@]}"; do
		echo >&2 "  ${goferConfigUpdates[$i]}"
		sudo tee "$GOFER_CONFIG" <<< "$(jq "${goferConfigUpdates[$i]}" "$GOFER_CONFIG")" > /dev/null
	done
	for i in "${!goferConfigOverrides[@]}"; do
		echo >&2 "  ${goferConfigOverrides[$i]}"
		sudo tee "$GOFER_CONFIG" <<< "$(jq "${goferConfigOverrides[$i]}" "$GOFER_CONFIG")" > /dev/null
	done

	echo >&2 "GOFER_CONFIG: DONE"
}

declare -a splitterConfigUpdates
declare -a splitterConfigOverrides
copySplitterConf() {
	echo >&2 "SPLITTER_CONFIG: START"

	if [[ -f "${SPLITTER_CONFIG%.conf}.json" ]]
	then
		sudo mv -f "${SPLITTER_CONFIG%.conf}.json" "${SPLITTER_CONFIG}"
	fi

	if [[ -f "${SPLITTER_CONFIG}" ]]; then
		local _savedConfig
		_savedConfig="$(jq '{ethereum} | del(.. | nulls)' "${SPLITTER_CONFIG}")"
		if [[ -n "$_savedConfig" ]]; then
			splitterConfigUpdates=( ". * $_savedConfig" )
		fi
	elif [[ -f /etc/systemd/system/splitter-agent.service ]]; then
		local _savedConfig
		_savedConfig="$(grep -Eo '\-\-eth-rpc=([^[:space:]]+)' /etc/systemd/system/splitter-agent.service \
										| sed 's/--eth-rpc=//' \
										| jq -R '.' | jq -sc)"
		if [[ -n "$_savedConfig" ]]; then
			splitterConfigUpdates=(". * {ethereum:{rpc:$_savedConfig}}")
		fi
	fi

	sudo cp -v "$SHARE_DIR/splitter.json" "${SPLITTER_CONFIG}" >&2
	sudo chmod u+w "${SPLITTER_CONFIG}" >&2

	splitterConfigOverrides+=(".splitter.rpc.address = \"${SPLITTER_RPC_ADDR}\"")

	for i in "${!splitterConfigUpdates[@]}"; do
		echo >&2 "  ${splitterConfigUpdates[$i]}"
		sudo tee "${SPLITTER_CONFIG}" <<< "$(jq "${splitterConfigUpdates[$i]}" "${SPLITTER_CONFIG}")" > /dev/null
	done
	for i in "${!splitterConfigOverrides[@]}"; do
		echo >&2 "  ${splitterConfigOverrides[$i]}"
		sudo tee "${SPLITTER_CONFIG}" <<< "$(jq "${splitterConfigOverrides[$i]}" "${SPLITTER_CONFIG}")" > /dev/null
	done

	if [[ -f "${SPLITTER_CONFIG}" ]]; then
		local _URL
		for _URL in $(jq -r '.ethereum.rpc[]' "${SPLITTER_CONFIG}"); do
			SPLITTER_URLS="${SPLITTER_URLS} --eth-rpc=${_URL}"
		done
	fi

	echo >&2 "SPLITTER_CONFIG: DONE"
}

installConfigs() {
	echo "INSTALL CONFIGS: START"
	copyOmniaConf "$installType.json"
	copySsbConf
	copySpireConf
	[[ "$installType" == "feed" ]] && copySplitterConf
	[[ "$installType" == "feed" ]] && copyGoferConf
	[[ "$installType" == "feed" ]] && copyLeelooConf
	echo "INSTALL CONFIGS: DONE"
}

installServices() {
	echo "INSTALL SERVICES: START"
	[[ "$installType" == "feed" ]] && subst leeloo-agent "$SHARE_DIR"/leeloo-agent.service
	[[ "$installType" == "feed" ]] && subst gofer-agent "$SHARE_DIR"/gofer-agent.service
	[[ "$installType" == "feed" ]] && subst splitter-agent "$SHARE_DIR"/splitter-agent.service
	subst spire-agent "$SHARE_DIR"/spire-agent.service
	subst ssb-server "$SHARE_DIR"/ssb-server.service
	subst omnia "$SHARE_DIR"/omnia.service
	echo "INSTALL SERVICES: DONE"
}

case "$1" in
	feed)
		installType="feed"
		;;
	relay)
		installType="relay"
		;;
	help | --help | -h)
		usage
		;;
	*)
		echo >&2 "\"$1\" is not a valid command"
		usage
		;;
esac

shift

while [[ -n "$1" ]]; do
	case "$1" in
		--debug)
			configOverrides+=(".options.debug = true")
			;;
		--verbose)
			configOverrides+=(".options.verbose = true")
			;;
		--set-origin-param)
			goferConfigOverrides+=(".gofer.origins.\"$2\".params.\"$3\" = \"$4\"")
			shift
			shift
			shift
			;;
		--gofer-origins)
			goferConfigOverrides+=(". * {gofer:{origins:$2}}")
			shift
			;;
		--eth-gas)
			configOverrides+=(".options.ethGas = $2")
			shift
			;;
		--eth-type)
			configOverrides+=(".ethereum.type = \"$2\"")
			case "$2" in
				ethereum)
					_gas=150000
					;;
				optimism)
					_gas=250000
					;;
				arbitrum)
					_gas=5000000
					;;
				*)
					echo >&2 "Chain type must be one of [ethereum|optimism|arbitrum]"
					usage
					;;
			esac
			configUpdates+=(".options.ethGas = ${_gas}")
			shift
			;;
		--eth-rpc)
			splitterConfigOverrides+=(".ethereum.rpc += [\"$2\"]")
			shift
			;;
		--eth-rpc-arbitrum)
			leelooConfigOverrides+=(".leeloo.listeners.teleportEVM[1].ethereum.rpc += [\"$2\"]")
			shift
			;;
		--eth-rpc-optimism)
			leelooConfigOverrides+=(".leeloo.listeners.teleportEVM[0].ethereum.rpc += [\"$2\"]")
			shift
			;;
		--from)
			configOverrides+=(".ethereum.from = \"$2\"")
			spireConfigOverrides+=(".ethereum.from = \"$2\"")
			spireConfigUpdates+=(".feeds += [\"$2\"]")
			leelooConfigOverrides+=(".ethereum.from = \"$2\"")
			leelooConfigUpdates+=(".feeds += [\"$2\"]")
			shift
			;;
		--keystore)
			configOverrides+=(".ethereum.keystore = \"$2\"")
			spireConfigOverrides+=(".ethereum.keystore = \"$2\"")
			leelooConfigOverrides+=(".ethereum.keystore = \"$2\"")
			shift
			;;
		--password)
			configOverrides+=(".ethereum.password = \"$2\"")
			spireConfigOverrides+=(".ethereum.password = \"$2\"")
			leelooConfigOverrides+=(".ethereum.password = \"$2\"")
			shift
			;;
		--teleport)
			if [[ -n "$2" ]]; then
				leelooConfigOverrides+=(".leeloo.listeners = $2")
			fi
			shift
			;;
		--logger)
			leelooConfigOverrides+=(".logger = $2")
			spireConfigOverrides+=(".logger = $2")
			goferConfigOverrides+=(".logger = $2")
			shift
			;;
		--feed-list)
			configOverrides+=(".feeds = $2")
			spireConfigOverrides+=(".feeds = $2")
			leelooConfigOverrides+=(".feeds = $2")
			shift
			;;
		--feed-map)
			configOverrides+=(".services.scuttlebotIdMap = $2")
			shift
			;;
		--pairs)
			configOverrides+=(".pairs = $2")
			shift
			;;
		--spire-bootstraps)
			spireConfigOverrides+=(".transport.libp2p.bootstrapAddrs = $2")
			leelooConfigOverrides+=(".transport.libp2p.bootstrapAddrs = $2")
			shift
			;;
		--spire-port)
			spireConfigOverrides+=(".transport.libp2p.listenAddrs = [\"/ip4/0.0.0.0/tcp/$2\"]")
			shift
			;;
		--spire-seed)
			spireConfigOverrides+=(".transport.libp2p.privKeySeed = \"$2\"")
			shift
			;;
		--spire-pairs)
			spireConfigOverrides+=(".spire.pairs = $2")
			shift
			;;
		--network)
			configOverrides+=(".ethereum.network = \"$2\"")
			shift
			;;
		--network-key)
			configOverrides+=(".ethereum.infuraKey = \"$2\"")
			shift
			;;
		--no-transport)
			configOverrides+=(".transports = []")
			;;
		--add-transport)
			configOverrides+=(".transports += [\"$2\"]")
			shift
			;;
		--no-source)
			configOverrides+=(".sources = []")
			;;
		--add-source)
			configOverrides+=(".sources += [\"$2\"]")
			shift
			;;
		--ssb-external)
			ssbConfigUpdates+=(".connections.incoming[\"net\",\"ws\"][].external = \"$2\"")
			shift
			;;
		--ssb-caps)
			ssbConfigUpdates+=(".caps = $(jq . "$2")")
			shift
			;;
		--ssb-secret)
			installSsbSecret="$2"
			shift
			;;
		--ssb-port)
			ssbConfigUpdates+=(".connections.incoming[\"net\"][].port = \"$2\"")
			shift
			;;
		--ssb-port-ws)
			ssbConfigUpdates+=(".connections.incoming[\"ws\"][].port = \"$2\"")
			shift
			;;
		--ssb-gossip)
			installSsbGossip="$2"
			shift
			;;
		--log-format)
			configOverrides+=(".options.logFormat = \"$2\"")
			GOFER_LOG_FORMAT="$2"
			SPIRE_LOG_FORMAT="$2"
			LEELOO_LOG_FORMAT="$2"
			SPLITTER_LOG_FORMAT="$2"
			shift
			;;
		--log-verbosity)
			if [[ $2 =~ warning|info|debug ]]; then
				configOverrides+=(".options.verbose = true")
			else
				configOverrides+=(".options.verbose = false")
			fi
			GOFER_LOG_VERBOSITY="$2"
			SPIRE_LOG_VERBOSITY="$2"
			LEELOO_LOG_VERBOSITY="$2"
			SPLITTER_LOG_VERBOSITY="$2"
			shift
			;;
		--help | -h)
			usage
			;;
		*)
			echo >&2 "\"$1\" is not a valid option"
			usage
			;;
	esac
	shift
done

installConfigs
installServices

echo >&2 "To (re)start Omnia now (and auto-start on reboot) run:"
echo "systemctl daemon-reload # Reload systemd services"
echo -n "$systemdCmd"
